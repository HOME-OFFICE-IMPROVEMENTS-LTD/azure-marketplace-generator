{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "azmp-plugin-vm",
      "version": "2.0.0"
    },
    "description": "Azure Marketplace VM deployment template",
    "author": "HOME OFFICE IMPROVEMENTS LTD"
  },
  "parameters": {
    "vmName": {
      "type": "string",
      "defaultValue": "enterprise-vm",
      "metadata": {
        "description": "Name of the virtual machine"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "enterpriseadmin",
      "metadata": {
        "description": "Administrator username for the VM"
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D8s_v3",
      "metadata": {
        "description": "Size of the virtual machine"
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Whether to create new or use existing virtual network"
      }
    },
    "virtualNetworkResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group of the virtual network"
      }
    },
    "publicIPAddressNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Whether to create new, use existing, or no public IP"
      }
    },
    "publicIPAddressResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group of the public IP address"
      }
    },
    "backupVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Recovery Services Vault for backup (auto-generated if empty)"
      }
    },
    "installExtensions": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install VM extensions"
      }
    },
    "installCustomScriptExtension": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to install Custom Script Extension"
      }
    },
    "installMonitoringExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Azure Monitor Agent"
      }
    },
    "installSecurityExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Azure Security Agent"
      }
    },
    "installAntimalwareExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Windows Antimalware Extension (Windows only)"
      }
    },
    "backupPolicyName": {
      "type": "string",
      "defaultValue": "DefaultPolicy",
      "metadata": {
        "description": "Name of the backup policy to use"
      }
    },
    "dailyRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 7,
      "maxValue": 9999,
      "metadata": {
        "description": "Number of days to retain daily backups"
      }
    },
    "backupScheduleTime": {
      "type": "string",
      "defaultValue": "02:00",
      "metadata": {
        "description": "Time for daily backup schedule (HH:mm format)"
      }
    }
  },
  "variables": {
    "vmName": "[parameters('vmName')]",
    "bastionHostName": "[concat(parameters('vmName'), '-bastion')]",
    "bastionSubnetName": "AzureBastionSubnet",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "backupVaultName": "[if(empty(parameters('backupVaultName')), concat(parameters('vmName'), '-vault'), parameters('backupVaultName'))]",
    "backupPolicyName": "[if(equals(parameters('backupPolicyName'), 'DefaultPolicy'), concat('policy-', parameters('vmName')), parameters('backupPolicyName'))]",
    "backupScheduleTimestamp": "[concat('2025-01-01T', parameters('backupScheduleTime'), ':00Z')]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2024-05-01",
      "name": "[concat(variables('bastionHostName'), '-pip')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2024-05-01",
      "name": "[variables('bastionHostName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('bastionHostName'), '-pip'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('bastionHostName'), '-pip'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('bastionSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2024-05-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.RecoveryServices/vaults",
      "apiVersion": "2023-06-01",
      "name": "[variables('backupVaultName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "RS0",
        "tier": "Standard"
      },
      "properties": {
        "publicNetworkAccess": "Enabled",
        "restoreSettings": {
          "crossRegionRestoreFlag": false
        },
        "securitySettings": {
          "immutabilitySettings": {
            "state": "Unlocked"
          }
        }
      }
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
      "apiVersion": "2023-06-01",
      "name": "[concat(variables('backupVaultName'), '/', variables('backupPolicyName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
      ],
      "properties": {
        "backupManagementType": "AzureIaasVM",
        "schedulePolicy": {
          "schedulePolicyType": "SimpleSchedulePolicy",
          "scheduleRunFrequency": "Daily",
          "scheduleRunTimes": [
            "[variables('backupScheduleTimestamp')]"
          ],
          "scheduleWeeklyFrequency": 0
        },
        "retentionPolicy": {
          "retentionPolicyType": "LongTermRetentionPolicy",
          "dailySchedule": {
            "retentionTimes": [
              "[variables('backupScheduleTimestamp')]"
            ],
            "retentionDuration": {
              "count": "[parameters('dailyRetentionDays')]",
              "durationType": "Days"
            }
          }
        },
        "instantRpRetentionRangeInDays": 2,
        "timeZone": "UTC"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-04-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]"
        },
        "storageProfile": {
          "imageReference": "[parameters('osImageReference')]",
          "osDisk": {
            "name": "[variables('osDiskName')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('storageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
      "apiVersion": "2023-06-01",
      "name": "[concat(variables('backupVaultName'), '/Azure/iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'), '/vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]"
      ],
      "properties": {
        "protectedItemType": "Microsoft.Compute/virtualMachines",
        "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]",
        "sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      }
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2024-01-01",
      "name": "[parameters('monitoringActionGroupName')]",
      "location": "global",
      "properties": {
        "groupShortName": "[parameters('monitoringActionGroupShortName')]",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "AdminEmail",
            "emailAddress": "[parameters('monitoringNotificationEmail')]",
            "useCommonAlertSchema": true
          }
        ]
      }
    }
  ],
  "outputs": {
    "vmName": {
      "type": "string",
      "value": "[variables('vmName')]"
    },
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    },
    "extensionsInstalled": {
      "type": "array",
      "value": "[if(parameters('installExtensions'), union(if(parameters('installCustomScriptExtension'), array('CustomScript'), createArray()), if(parameters('installMonitoringExtension'), array('MonitoringAgent'), createArray()), if(parameters('installSecurityExtension'), array('SecurityAgent'), createArray()), if(and(parameters('installAntimalwareExtension'), equals(parameters('osType'), 'Windows')), array('Antimalware'), createArray())), createArray())]"
    },
    "vmResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "value": "[parameters('virtualNetworkNewOrExisting')]"
    },
    "virtualNetworkResourceGroup": {
      "type": "string",
      "value": "[parameters('virtualNetworkResourceGroup')]"
    },
    "publicIPAddressNewOrExisting": {
      "type": "string",
      "value": "[parameters('publicIPAddressNewOrExisting')]"
    },
    "publicIPAddressResourceGroup": {
      "type": "string",
      "value": "[parameters('publicIPAddressResourceGroup')]"
    },
    "backupVaultId": {
      "type": "string",
      "value": "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
    },
    "backupPolicyId": {
      "type": "string",
      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]"
    }
  }
}