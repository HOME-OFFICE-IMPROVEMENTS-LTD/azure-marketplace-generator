name: 🤖 Intelligent Dependency Management
on:
  schedule:
    # Run daily at 02:00 UTC for dependency monitoring
    - cron: '0 2 * * *'
  
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '.github/dependabot.yml'
  
  workflow_dispatch:
    inputs:
      auto_merge_type:
        description: 'Auto-merge dependency type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - none

jobs:
  intelligent-dependency-management:
    name: 🚀 Smart Dependency Operations
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔧 Setup Node.js Environment
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📊 Dependency Analysis
        run: |
          echo "🔍 Analyzing dependency landscape..."
          
          # Check for available updates
          npm outdated --json > /tmp/outdated.json || echo "{}" > /tmp/outdated.json
          
          # Security audit
          npm audit --json > /tmp/audit.json || echo "{}" > /tmp/audit.json
          
          # Package analysis
          echo "📦 Current dependency status:"
          npm list --depth=0 || echo "Dependencies checked"

      - name: 🛡️ Security Vulnerability Assessment
        run: |
          echo "🔒 Assessing security vulnerabilities..."
          
          # Count vulnerabilities by severity
          CRITICAL=$(cat /tmp/audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat /tmp/audit.json | jq '.metadata.vulnerabilities.high // 0')
          MODERATE=$(cat /tmp/audit.json | jq '.metadata.vulnerabilities.moderate // 0')
          LOW=$(cat /tmp/audit.json | jq '.metadata.vulnerabilities.low // 0')
          
          echo "🚨 Critical: $CRITICAL"
          echo "⚠️ High: $HIGH"  
          echo "📋 Moderate: $MODERATE"
          echo "ℹ️ Low: $LOW"
          
          # Fail if critical or high vulnerabilities
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "❌ Critical security vulnerabilities detected!"
            echo "::error::Critical or high severity vulnerabilities found"
            exit 1
          fi

      - name: 🤖 Automated Dependabot PR Management
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🤖 Managing Dependabot pull requests..."
          
          # Get all open Dependabot PRs
          gh pr list --author "app/dependabot" --json number,title,headRefName > /tmp/dependabot_prs.json
          
          # Process each Dependabot PR
          cat /tmp/dependabot_prs.json | jq -r '.[] | "\(.number)|\(.title)|\(.headRefName)"' | while IFS='|' read -r pr_number pr_title branch_name; do
            echo "📋 Processing PR #$pr_number: $pr_title"
            
            # Check if it's a patch or minor update
            if echo "$pr_title" | grep -qE "(patch|minor)" && echo "$pr_title" | grep -qvE "(major|breaking)"; then
              echo "✅ Auto-merging safe dependency update: PR #$pr_number"
              
              # Wait for checks to complete
              sleep 30
              
              # Check PR status
              if gh pr view "$pr_number" --json mergeable,mergeStateStatus | jq -r '.mergeable == "MERGEABLE" and .mergeStateStatus == "CLEAN"' | grep -q true; then
                gh pr merge "$pr_number" --auto --squash --delete-branch
                echo "🎉 Successfully auto-merged PR #$pr_number"
              else
                echo "⏳ PR #$pr_number not ready for merge yet"
              fi
            else
              echo "⚠️ Manual review required for PR #$pr_number (major update)"
            fi
          done

      - name: 📈 Dependency Health Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📊 Generating dependency health report..."
          
          # Count packages
          TOTAL_DEPS=$(npm list --json --depth=0 | jq '.dependencies | length')
          OUTDATED_COUNT=$(cat /tmp/outdated.json | jq 'length')
          
          # Create health report
          cat > /tmp/dependency-report.md << EOF
          ## 📦 Dependency Health Report
          
          **Generated:** $(date)
          **Repository:** ${{ github.repository }}
          
          ### 📊 Summary Statistics
          - **Total Dependencies:** $TOTAL_DEPS
          - **Outdated Packages:** $OUTDATED_COUNT
          - **Security Vulnerabilities:** $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.total // 0')
          
          ### 🛡️ Security Status
          - **Critical:** $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.critical // 0')
          - **High:** $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.high // 0')
          - **Moderate:** $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.moderate // 0')
          - **Low:** $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.low // 0')
          
          ### 🤖 Automated Actions Taken
          - Dependabot PRs analyzed and processed
          - Safe updates auto-merged
          - Security vulnerabilities assessed
          
          ### 🎯 Recommendations
          - Review any major version updates manually
          - Monitor security advisory channels
          - Keep dependencies up to date regularly
          
          **Status:** $(if [ $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.critical // 0') -eq 0 ] && [ $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.high // 0') -eq 0 ]; then echo "✅ Healthy"; else echo "⚠️ Attention Required"; fi)
          EOF
          
          echo "📋 Dependency health report generated"
          cat /tmp/dependency-report.md

      - name: 🔄 Update Package Metadata
        run: |
          echo "🔄 Updating package metadata..."
          
          # Update package-lock.json if needed
          if [ -f "package-lock.json" ]; then
            npm audit fix --package-lock-only || echo "No fixes applied"
          fi
          
          # Check for package.json changes
          if git diff --quiet package.json package-lock.json; then
            echo "✅ No package changes detected"
          else
            echo "📝 Package changes detected"
            git diff package.json package-lock.json
          fi

      - name: 🚨 Security Alert Integration
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚨 Creating security alert issue..."
          
          # Create security issue if vulnerabilities found
          gh issue create \
            --title "🚨 Security Alert: Dependency Vulnerabilities Detected" \
            --label "security,dependencies,automated" \
            --body "## 🚨 Security Alert

          **Critical security vulnerabilities detected in dependencies!**

          ### 📋 Details
          - **Detection Time:** $(date)
          - **Workflow:** ${{ github.workflow }}
          - **Critical Vulnerabilities:** $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.critical // 0')
          - **High Vulnerabilities:** $(cat /tmp/audit.json | jq '.metadata.vulnerabilities.high // 0')

          ### 🎯 Required Actions
          - [ ] Review npm audit output
          - [ ] Update vulnerable dependencies
          - [ ] Test application functionality
          - [ ] Deploy security fixes

          ### 🔧 Commands to Run
          \`\`\`bash
          npm audit
          npm audit fix
          npm test
          \`\`\`

          **This issue was automatically created by the security monitoring system.**"

      - name: 📊 Workflow Summary
        if: always()
        run: |
          echo "📈 Dependency management workflow completed"
          echo "🎯 Summary of operations:"
          echo "  ✅ Dependency analysis completed"
          echo "  🛡️ Security assessment performed"  
          echo "  🤖 Dependabot PRs processed"
          echo "  📊 Health report generated"
          echo "  🔄 Package metadata updated"