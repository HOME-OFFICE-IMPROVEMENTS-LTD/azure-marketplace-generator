name: ü§ñ Intelligent Dependency Management
on:
  schedule:
    # Run daily at 02:00 UTC for dependency monitoring
    - cron: '0 2 * * *'
  
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '.github/dependabot.yml'
  
  workflow_dispatch:
    inputs:
      auto_merge_type:
        description: 'Auto-merge dependency type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - none

jobs:
  intelligent-dependency-management:
    name: üöÄ Smart Dependency Operations
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üîß Setup Node.js Environment
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: üìä Dependency Analysis
        run: |
          echo "üîç Analyzing dependency landscape..."
          
          # Check for available updates
          npm outdated --json > /tmp/outdated.json || echo "{}" > /tmp/outdated.json
          
          # Security audit
          npm audit --json > /tmp/audit.json || echo "{}" > /tmp/audit.json
          
          # Package analysis
          echo "üì¶ Current dependency status:"
          npm list --depth=0 || echo "Dependencies checked"

      - name: üõ°Ô∏è Security Vulnerability Assessment
        run: |
          echo "üîí Assessing security vulnerabilities..."
          
          # Count vulnerabilities by severity using Node.js
          node -e "
            const fs = require('fs');
            let auditData = {};
            try {
              auditData = JSON.parse(fs.readFileSync('/tmp/audit.json', 'utf8'));
            } catch (e) {
              auditData = { metadata: { vulnerabilities: { critical: 0, high: 0, moderate: 0, low: 0 } } };
            }
            
            const vulns = auditData.metadata?.vulnerabilities || { critical: 0, high: 0, moderate: 0, low: 0 };
            console.log(\`CRITICAL=\${vulns.critical || 0}\`);
            console.log(\`HIGH=\${vulns.high || 0}\`);
            console.log(\`MODERATE=\${vulns.moderate || 0}\`);
            console.log(\`LOW=\${vulns.low || 0}\`);
          " > /tmp/vuln_vars.sh
          
          source /tmp/vuln_vars.sh
          
          echo "üö® Critical: $CRITICAL"
          echo "‚ö†Ô∏è High: $HIGH"  
          echo "üìã Moderate: $MODERATE"
          echo "‚ÑπÔ∏è Low: $LOW"
          
          # Fail if critical or high vulnerabilities
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "‚ùå Critical security vulnerabilities detected!"
            echo "::error::Critical or high severity vulnerabilities found"
            exit 1
          fi

      - name: ü§ñ Automated Dependabot PR Management
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ü§ñ Managing Dependabot pull requests..."
          
          # Get all open Dependabot PRs
          gh pr list --author "app/dependabot" --json number,title,headRefName > /tmp/dependabot_prs.json
          
          # Process each Dependabot PR using Node.js
          node -e "
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let prs = [];
            try {
              prs = JSON.parse(fs.readFileSync('/tmp/dependabot_prs.json', 'utf8'));
            } catch (e) {
              console.log('No Dependabot PRs found');
              process.exit(0);
            }
            
            for (const pr of prs) {
              console.log(\`üìã Processing PR #\${pr.number}: \${pr.title}\`);
              
              // Check if it's a patch or minor update
              if (/patch|minor/i.test(pr.title) && !/major|breaking/i.test(pr.title)) {
                console.log(\`‚úÖ Auto-merging safe dependency update: PR #\${pr.number}\`);
                
                try {
                  // Wait for checks to complete
                  execSync('sleep 30');
                  
                  // Check PR status
                  const prStatus = execSync(\`gh pr view \${pr.number} --json mergeable,mergeStateStatus\`, { encoding: 'utf8' });
                  const status = JSON.parse(prStatus);
                  
                  if (status.mergeable === 'MERGEABLE' && status.mergeStateStatus === 'CLEAN') {
                    execSync(\`gh pr merge \${pr.number} --auto --squash --delete-branch\`);
                    console.log(\`üéâ Successfully auto-merged PR #\${pr.number}\`);
                  } else {
                    console.log(\`‚è≥ PR #\${pr.number} not ready for merge yet\`);
                  }
                } catch (error) {
                  console.log(\`‚ùå Failed to merge PR #\${pr.number}: \${error.message}\`);
                }
              } else {
                console.log(\`‚ö†Ô∏è Skipping major update PR #\${pr.number}\`);
              }
            }
          "
              
      - name: üìà Dependency Health Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìä Generating dependency health report..."
          
          # Count packages using Node.js
          node -e "
            const fs = require('fs');
            
            // Get dependency counts
            let totalDeps = 0;
            let outdatedCount = 0;
            let auditData = {};
            
            try {
              const packageData = JSON.parse(fs.readFileSync('package.json', 'utf8'));
              totalDeps = Object.keys(packageData.dependencies || {}).length + Object.keys(packageData.devDependencies || {}).length;
            } catch (e) {
              console.log('Could not read package.json');
            }
            
            try {
              const outdatedData = JSON.parse(fs.readFileSync('/tmp/outdated.json', 'utf8'));
              outdatedCount = Object.keys(outdatedData).length;
            } catch (e) {
              outdatedCount = 0;
            }
            
            try {
              auditData = JSON.parse(fs.readFileSync('/tmp/audit.json', 'utf8'));
            } catch (e) {
              auditData = { metadata: { vulnerabilities: { total: 0, critical: 0, high: 0, moderate: 0, low: 0 } } };
            }
            
            const vulns = auditData.metadata?.vulnerabilities || { total: 0, critical: 0, high: 0, moderate: 0, low: 0 };
            const isHealthy = (vulns.critical || 0) === 0 && (vulns.high || 0) === 0;
            
            console.log('## üì¶ Dependency Health Report');
            console.log('');
            console.log('**Generated:** ' + new Date().toISOString());
            console.log('**Repository:** ${{ github.repository }}');
            console.log('');
            console.log('### üìä Summary Statistics');
            console.log('- **Total Dependencies:** ' + totalDeps);
            console.log('- **Outdated Packages:** ' + outdatedCount);
            console.log('- **Security Vulnerabilities:** ' + (vulns.total || 0));
            console.log('');
            console.log('### üõ°Ô∏è Security Status');
            console.log('- **Critical:** ' + (vulns.critical || 0));
            console.log('- **High:** ' + (vulns.high || 0));
            console.log('- **Moderate:** ' + (vulns.moderate || 0));
            console.log('- **Low:** ' + (vulns.low || 0));
            console.log('');
            console.log('### ü§ñ Automated Actions Taken');
            console.log('- Dependabot PRs analyzed and processed');
            console.log('- Safe updates auto-merged');
            console.log('- Security vulnerabilities assessed');
            console.log('');
            console.log('### üéØ Recommendations');
            console.log('- Review any major version updates manually');
            console.log('- Monitor security advisory channels');
            console.log('- Keep dependencies up to date regularly');
            console.log('');
            console.log('**Status:** ' + (isHealthy ? '‚úÖ Healthy' : '‚ö†Ô∏è Attention Required'));
          "

      - name: üîÑ Update Package Metadata
        run: |
          echo "üîÑ Updating package metadata..."
          
          # Update package-lock.json if needed
          if [ -f "package-lock.json" ]; then
            npm audit fix --package-lock-only || echo "No fixes applied"
          fi
          
          # Check for package.json changes
          if git diff --quiet package.json package-lock.json; then
            echo "‚úÖ No package changes detected"
          else
            echo "üìù Package changes detected"
            git diff package.json package-lock.json
          fi

      - name: üö® Security Alert Integration
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üö® Creating security alert issue..."
          
          # Get vulnerability counts using Node.js
          VULN_INFO=$(node -e "
            const fs = require('fs');
            let auditData = {};
            try {
              auditData = JSON.parse(fs.readFileSync('/tmp/audit.json', 'utf8'));
            } catch (e) {
              auditData = { metadata: { vulnerabilities: { critical: 0, high: 0 } } };
            }
            const vulns = auditData.metadata?.vulnerabilities || { critical: 0, high: 0 };
            console.log('CRITICAL=' + (vulns.critical || 0));
            console.log('HIGH=' + (vulns.high || 0));
          ")
          
          eval "$VULN_INFO"
          
          # Create security issue if vulnerabilities found
          gh issue create \
            --title "üö® Security Alert: Dependency Vulnerabilities Detected" \
            --label "security,dependencies,automated" \
            --body "## üö® Security Alert

          **Critical security vulnerabilities detected in dependencies!**

          ### üìã Details
          - **Detection Time:** $(date)
          - **Workflow:** ${{ github.workflow }}
          - **Critical Vulnerabilities:** $CRITICAL
          - **High Vulnerabilities:** $HIGH

          ### üéØ Required Actions
          - [ ] Review npm audit output
          - [ ] Update vulnerable dependencies
          - [ ] Test application functionality
          - [ ] Deploy security fixes

          ### üîß Commands to Run
          \`\`\`bash
          npm audit
          npm audit fix
          npm test
          \`\`\`

          **This issue was automatically created by the security monitoring system.**"

      - name: üìä Workflow Summary
        if: always()
        run: |
          echo "üìà Dependency management workflow completed"
          echo "üéØ Summary of operations:"
          echo "  ‚úÖ Dependency analysis completed"
          echo "  üõ°Ô∏è Security assessment performed"  
          echo "  ü§ñ Dependabot PRs processed"
          echo "  üìä Health report generated"
          echo "  üîÑ Package metadata updated"